[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autodoceval"
version = "0.1.0"
description = "Document evaluation in closed-loop autocycle using OpenAI evaluation framework"
authors = [{ name = "Oleksandr Kryklia", email = "kryklia@gmail.com" }]
readme = "README.md"
license = { text = "MIT" }
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
]
requires-python = ">=3.9"
dependencies = [
    "openai>=1.0.0",
    "deepeval>=0.20.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.2.0",
    "build",
    "twine",
    "invoke>=2.0.0"
]

[project.scripts]
autodoceval = "autodoceval.cli:main"

[tool.pytest]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.pytest.ini_options]
markers = [
    "unit: marks test as a unit test",
    "integration: marks test as an integration test",
    "requires_openai: marks tests that require OpenAI API",
    "requires_deepeval: marks tests that require DeepEval"
]
addopts = "--cov=autodoceval --cov-report=term -k 'not requires_openai and not requires_deepeval'"

[tool.coverage.run]
source = ["autodoceval"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
]

[tool.ruff]
# Enable linting and formatting capabilities
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "UP", # pyupgrade
    "N",  # pep8-naming
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "ERA", # eradicate (commented out code)
    "RUF", # ruff-specific rules
]
ignore = ["E501"]  # Line too long

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["autodoceval"]

[tool.setuptools]
packages = ["autodoceval"]

[tool.setuptools.package-data]
autodoceval = ["py.typed", "examples/*.md", "examples/*.json"]